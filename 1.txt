var jwt = require('jwt'); // JWT module for decoding and verifying tokens
var urlopen = require('urlopen'); // Module for making HTTP/HTTPS requests

// Replace with the actual JWT token you want to validate
var jwtToken = "your_jwt_token_here";

// Split the JWT into its components
var jwtSplitTokens = jwtToken.split('.');
var encodedHeader = jwtSplitTokens[0];
var decodedHeader = JSON.parse(Buffer.from(encodedHeader, 'base64').toString('utf-8'));

var kid = decodedHeader.kid; // Extract the Key ID (kid) from the JWT header
console.log('kid: ' + kid);

// URL of the JWK set - replace with the actual URL
var jwkUrl = "https://example.com/.well-known/jwks.json";

// Function to fetch the JWK Set
function fetchJwkSet(callback) {
    urlopen.open({
        url: jwkUrl,
        method: 'GET',
        headers: { 'Accept': 'application/json' }
    }, function(error, response) {
        if (error) {
            callback(error);
            return;
        }

        var responseStatusCode = response.statusCode;
        if (responseStatusCode !== 200) {
            callback(new Error("Failed to fetch JWK Set. Status Code: " + responseStatusCode));
            return;
        }

        response.readAsJSON(function(error, jwkSet) {
            if (error) {
                callback(error);
            } else {
                callback(null, jwkSet);
            }
        });
    });
}

// Fetch the JWK Set and validate the JWT
fetchJwkSet(function(error, jwkSet) {
    if (error) {
        console.error("Failed to fetch JWK Set:", error);
        session.reject('JWTError', 401, 'Failed to fetch JWK Set');
        return;
    }

    // Find the key in the JWK Set that matches the 'kid'
    var publicKey;
    for (var i = 0; i < jwkSet.keys.length; i++) {
        if (jwkSet.keys[i].kid === kid) {
            publicKey = jwkSet.keys[i];
            break;
        }
    }

    if (!publicKey) {
        console.error("No matching key found in JWK Set for kid:", kid);
        session.reject('JWTError', 401, 'No matching key found in JWK Set');
        return;
    }

    console.log("Public Key found:", publicKey);

    // Initialize the JWT decoder with the JWT token
    var decoder = new jwt.Decoder(jwtToken);

    // Add operations to the decoder for verification
    decoder.addOperation('verify', publicKey)
           .addOperation({
               validateDataType: true,
               validateAudience: true,
               validateExpiration: true,
               validateNotBefore: true,
               validateAud: 'data-rouser' // Replace with your actual audience
           })
           .decode(function (error, claims) {
               if (error) {
                   console.error("JWT verification failed:", error.errorMessage);
                   session.reject('JWTError', 401, error.errorMessage);
                   return;
               }

               console.log("JWT Claims:", claims);

               // Verify specific claims (customize as needed)
               if (claims.iss !== 'expected_issuer') { // Replace with your expected issuer
                   console.error("Invalid issuer:", claims.iss);
                   session.reject('JWTError', 401, 'Invalid issuer');
                   return;
               }

               if (!claims.aud || claims.aud !== 'data-rouser') { // Replace with your expected audience
                   console.error("Invalid audience:", claims.aud);
                   session.reject('JWTError', 401, 'Invalid audience');
                   return;
               }

               // Verify scopes
               var expectedScopes = ['read:ora', 'write:ora']; // Example expected scopes
               var tokenScopes = claims.scope.split(' '); // Assuming scopes are space-separated in the JWT

               var hasRequiredScopes = expectedScopes.every(scope => tokenScopes.includes(scope));
               if (!hasRequiredScopes) {
                   console.error("Insufficient scope:", claims.scope);
                   session.reject('JWTError', 403, 'Insufficient scope');
                   return;
               }

               console.log("JWT validated successfully.");

               // Proceed with further processing using the JWT claims
               // Your business logic here
           });
});

console.log('JWT processing complete.');


-----
var https = require('https'); // Module for making HTTPS requests
var jwt = require('jwt'); // Assuming jwt module is available in your environment
var session = require('session');

// Split JWT into its components
var jwtToken = "your_jwt_token_here"; // Replace with the actual JWT token
var jwtSplitTokens = jwtToken.split('.');
var encodedHeader = jwtSplitTokens[0];
var decodedHeader = JSON.parse(Buffer.from(encodedHeader, 'base64').toString('utf-8'));

var kid = decodedHeader.kid; // Extract the Key ID from the JWT header
console.log('kid: ' + kid);
console.log('decodedHeader alg: ' + decodedHeader.alg);

console.log('Starting JWT decoding...');

// URL of the JWK set
var jwkUrl = "https://example.com/.well-known/jwks.json"; // Replace with the actual JWK URL

// Function to fetch JWK Set
function fetchJwkSet(callback) {
    https.get(jwkUrl, function(response) {
        var body = '';

        response.on('data', function(chunk) {
            body += chunk;
        });

        response.on('end', function() {
            if (response.statusCode === 200) {
                var jwkSet = JSON.parse(body);
                callback(null, jwkSet);
            } else {
                callback(new Error("Failed to fetch JWK Set. Status Code: " + response.statusCode));
            }
        });

    }).on('error', function(e) {
        callback(e);
    });
}

// Fetch the JWK Set and validate JWT
fetchJwkSet(function(error, jwkSet) {
    if (error) {
        throw {
            name: "Unauthorized",
            message: "Failed to fetch JWK Set",
            errorType: "JWTError",
            errorCode: "401"
        };
    }

    // Find the key in the JWK Set that matches the 'kid'
    var publicKey;
    for (var i = 0; i < jwkSet.keys.length; i++) {
        if (jwkSet.keys[i].kid === kid) {
            publicKey = jwkSet.keys[i];
            break;
        }
    }

    if (!publicKey) {
        throw {
            name: "Unauthorized",
            message: "No matching key found in JWK Set",
            errorType: "JWTError",
            errorCode: "401"
        };
    }

    console.log("Public Key found:", publicKey);

    // Initialize the JWT decoder with the JWT token
    var decoder = new jwt.Decoder(jwtToken);

    // Add operations to the decoder for verification
    decoder.addOperation('verify', publicKey)
           .addOperation({
               validateDataType: true,
               validateAudience: true,  // Ensure audience validation
               validateExpiration: true,
               validateNotBefore: true,
               validateAud: 'data-rouser' // Example audience; replace with your actual audience
           })
           .decode(function (error, claims) {
               if (error) {
                   var errorPhrase = error.errorMessage;
                   if (errorPhrase.includes('expired')) {
                       throw {
                           name: "Unauthorized",
                           message: "The access token expired",
                           errorType: "JWTError",
                           errorCode: "401"
                       };
                   } else {
                       // Handle other errors
                       throw {
                           name: "Unauthorized",
                           message: "Invalid JWT",
                           errorType: "JWTError",
                           errorCode: "401"
                       };
                   }
               }

               console.log("JWT Claims: ", claims);

               // Verify specific claims
               if (claims.iss !== 'expected_issuer') { // Replace with your expected issuer
                   throw {
                       name: "Unauthorized",
                       message: "Invalid issuer",
                       errorType: "JWTError",
                       errorCode: "401"
                   };
               }

               if (claims.sub !== 'expected_subject') { // Replace with your expected subject
                   throw {
                       name: "Unauthorized",
                       message: "Invalid subject",
                       errorType: "JWTError",
                       errorCode: "401"
                   };
               }

               if (!claims.aud || claims.aud !== 'data-rouser') { // Replace with your expected audience
                   throw {
                       name: "Unauthorized",
                       message: "Invalid audience",
                       errorType: "JWTError",
                       errorCode: "401"
                   };
               }

               // Verify scopes
               var expectedScopes = ['read:ora', 'write:ora']; // Example expected scopes
               var tokenScopes = claims.scope.split(' '); // Assuming scopes are space-separated in the JWT

               var hasRequiredScopes = expectedScopes.every(scope => tokenScopes.includes(scope));

               if (!hasRequiredScopes) {
                   throw {
                       name: "Unauthorized",
                       message: "Insufficient scope",
                       errorType: "JWTError",
                       errorCode: "403"
                   };
               }

               console.log("JWT validated successfully.");

               // Proceed with further processing using the JWT claims
           });
});

console.log('JWT processing complete.');


---
var https = require('https'); // Module for making HTTPS requests
var jwt = require('jwt'); // Assuming jwt module is available in your environment
var session = require('session');

// Split JWT into its components
var jwtToken = "your_jwt_token_here"; // Replace with the actual JWT token
var jwtSplitTokens = jwtToken.split('.');
var encodedHeader = jwtSplitTokens[0];
var decodedHeader = JSON.parse(Buffer.from(encodedHeader, 'base64').toString('utf-8'));

var kid = decodedHeader.kid; // Extract the Key ID from the JWT header
console.log('kid: ' + kid);
console.log('decodedHeader alg: ' + decodedHeader.alg);

console.log('Starting JWT decoding...');

// URL of the JWK set
var jwkUrl = "https://example.com/.well-known/jwks.json"; // Replace with the actual JWK URL

// Function to fetch JWK Set
function fetchJwkSet(callback) {
    https.get(jwkUrl, function(response) {
        var body = '';

        response.on('data', function(chunk) {
            body += chunk;
        });

        response.on('end', function() {
            if (response.statusCode === 200) {
                var jwkSet = JSON.parse(body);
                callback(null, jwkSet);
            } else {
                callback(new Error("Failed to fetch JWK Set. Status Code: " + response.statusCode));
            }
        });

    }).on('error', function(e) {
        callback(e);
    });
}

// Fetch the JWK Set and validate JWT
fetchJwkSet(function(error, jwkSet) {
    if (error) {
        throw {
            name: "Unauthorized",
            message: "Failed to fetch JWK Set",
            errorType: "JWTError",
            errorCode: "401"
        };
    }

    // Find the key in the JWK Set that matches the 'kid'
    var publicKey;
    for (var i = 0; i < jwkSet.keys.length; i++) {
        if (jwkSet.keys[i].kid === kid) {
            publicKey = jwkSet.keys[i];
            break;
        }
    }

    if (!publicKey) {
        throw {
            name: "Unauthorized",
            message: "No matching key found in JWK Set",
            errorType: "JWTError",
            errorCode: "401"
        };
    }

    console.log("Public Key found:", publicKey);

    // Initialize the JWT decoder with the JWT token
    var decoder = new jwt.Decoder(jwtToken);

    // Add operations to the decoder for verification
    decoder.addOperation('verify', publicKey)
           .addOperation({
               validateDataType: true,
               validateAudience: false,
               validateExpiration: true,
               validateNotBefore: true,
               validateAud: 'data-rouser'
           })
           .decode(function (error, claims) {
               if (error) {
                   var errorPhrase = error.errorMessage;
                   if (errorPhrase.includes('expired')) {
                       throw {
                           name: "Unauthorized",
                           message: "The access token expired",
                           errorType: "JWTError",
                           errorCode: "401"
                       };
                   } else {
                       // Handle other errors
                       throw {
                           name: "Unauthorized",
                           message: "Invalid JWT",
                           errorType: "JWTError",
                           errorCode: "401"
                       };
                   }
               }

               console.log("JWT Claims: ", claims);

               // Proceed with further processing using the JWT claims
           });
});

console.log('JWT processing complete.');
--------------
var sm = require('service-metadata');
var buffer = require('buffer');

// Extract the raw SOAP message
var soapMessage = sm.getVar('var://context/input');
console.log("Received SOAP Message:", soapMessage);

// Define a regular expression to find the `xop:Include` href attribute
var xopRegex = /<xop:Include href="cid:(.*?)"/;
var match = xopRegex.exec(soapMessage);

if (match) {
    var cid = match[1];  // Extract the Content-ID (CID) from the xop:Include element

    // Use the Content-ID to retrieve the binary attachment from the context
    var attachment = sm.getVar('var://service/attachment/' + cid);

    if (attachment) {
        // Convert the attachment (which is a Buffer) to a string
        var jsonString = attachment.toString('utf-8');

        // Log the JSON string (for debugging purposes)
        console.log("JSON Content as String:", jsonString);

        // Parse the JSON string into a JavaScript object
        try {
            var jsonObject = JSON.parse(jsonString);
            console.log("Parsed JSON Object:", jsonObject);

            // You can now work with the JSON object as needed
            // For example, access a specific property:
            console.log("Specific Property:", jsonObject.someProperty);

            // Optionally, modify the JSON object and re-encode it
            jsonObject.newProperty = "New Value";
            var updatedJsonString = JSON.stringify(jsonObject);

            // Log the updated JSON string
            console.log("Updated JSON String:", updatedJsonString);

        } catch (e) {
            console.error("Failed to parse JSON content:", e);
        }

    } else {
        console.log("No attachment found with Content-ID:", cid);
    }
} else {
    console.log("No xop:Include element found in the SOAP message.");
}

// Optionally, write back a response or modify the existing SOAP message
// session.output.write(modifiedSoapMessage);
----------





var options = {
    url: tokenEndpoint,  // The endpoint to get the OAuth token
    method: 'POST',      // HTTP method (typically POST for token requests)
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded'  // Specify the content type
    },
    body: `grant_type=password&client_id=${vClientId}&client_secret=${vClientSecret}&username=${vUsername}&password=${vPassword}&isCashier=true`,  // Body of the request
    sslClientProfile: 'B2BSabStore-STC-TOPUP-CP'  // SSL client profile, if needed
};

urlopen.open(options, function(error, response) {
    if (error) {
        throw error;  // Handle error
    } else {
        var authApiResponseStatusCode = response.statusCode;  // Get the status code

        if (authApiResponseStatusCode == 200) {
            response.readAsJSON(function(error, response) {
                if (error) {
                    throw error;  // Handle error in reading response
                } else {
                    // Assuming the token is returned in 'access_token' property
                    var oauthToken = response.access_token;

                    // Create a context variable with the OAuth token
                    context.setVar('Token', oauthToken);
                }
            });
        } else {
            // Handle non-200 status codes
            console.log(`Error: Received status code ${authApiResponseStatusCode}`);
        }
    }
});--------







const crypto = require('crypto');

function signSignatureBaseString(ks, signingKeyName) {
  try {
    // Create a Sign object with the 'rsa-sha256' algorithm
    const sign = crypto.createSign('rsa-sha256');
    
    // Update the Sign object with the data to be signed
    sign.update(ks);
    
    // Sign the data with the provided private key and output the signature in Base64 encoding
    const signature = sign.sign(signingKeyName, 'base64');
    
    console.log("Signature with rsa-sha256 is:", signature);
    
    return signature;
  } catch (error) {
    console.error("Sign error:", error);
    return null;
  }
}

// Example usage:
// const privateKey = fs.readFileSync('path_to_private_key.pem', 'utf8');
// signSignatureBaseString('your_base_string_here', privateKey);




------
// Function to generate UUID v4 string without dashes
function generateUUIDv4() {
    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0,
            v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

// Generate the UUID
var uuidWithoutDashes = generateUUIDv4();

// Log the generated UUID to the console
console.info('Generated UUID:', uuidWithoutDashes);

// Set the UUID in a context variable
session.name('partnerUUID', uuidWithoutDashes);

// Example usage: creating a JSON response with the UUID
var response = {
    "message": "Partner onboarded successfully",
    "partnerUUID": uuidWithoutDashes
};

// Output the response
session.output.write(JSON.stringify(response));









the regular expression .*\/frames\?.* in the Match Expression field.




// Import the necessary DataPower module
var sm = require('service-metadata');

// Get the local IP address of the DataPower appliance
var localIP = sm.current.localAddr;

// Get the client IP address from the connection information
var clientIP = sm.current.clientIP;

// Log the IP addresses (for debugging purposes)
console.info("Local IP (DataPower): " + localIP);
console.info("Client IP: " + clientIP);

// Check if the IP addresses match
if (localIP !== clientIP) {
    // If they do not match, reject the request
    console.error("IP address mismatch: rejecting request.");
    session.reject("IP address mismatch: access denied.");
} else {
    // If they match, continue processing
    console.info("IP address match: processing request.");
    session.output.write("IP address match: processing request.");
}

----
// Define the input JSON string with a trailing comma
var jsonString = '[{"abc": "dd"}, {"ddd":"4"},]';

// Remove the trailing comma using a regular expression
jsonString = jsonString.replace(/,\s*$/, '');

// Parse the cleaned JSON string into an object
var jsonObject;
try {
    jsonObject = JSON.parse(jsonString);
} catch (e) {
    // Handle the error if JSON is invalid
    console.error('Invalid JSON:', e);
    throw e;
}

// Now you can use jsonObject as needed
console.log(JSON.stringify(jsonObject, null, 2));








Ericsson 13-Jun-22
=====================


#!/bin/bash
sudo echo -e "Tech@2020\nTech@2020" | passwd root;
sudo cp -p /etc/ssh/sshd_config /etc/ssh/sshd_config_backup;
sudo sed -i 's/^PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config;
sudo sed -i 's/^PermitRootLogin*/PermitRootLogin yes/' /etc/ssh/sshd_config;
sudo echo "PermitRootLogin yes" >> /etc/ssh/sshd_config;
sudo systemctl restart sshd;
sudo yum install -y wget unzip curl;


================


 sudo -i
 hostnamectl set-hostname gagan-dockerhost
 bash
 
 
 ############# Install Docker - Amazon Linux ##############
 yum install docker
 systemctl start docker
 systemctl enable docker
 docker ps 
 docker run hello-world
 ###############################
 
  ############# Install Docker - Ubuntu ##############
sudo apt-get update -y
sudo apt-get install ca-certificates curl gnupg lsb-release -y
sudo mkdir -p /etc/apt/keyrings


curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o  /etc/apt/keyrings/docker.gpg


echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null


sudo apt-get update -y


sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y


#############################################


 ps -ef | grep -i docker
 docker ps
 docker ps -a
 ls
 ls /
 top
 docker run hello-world
 docker ps -a
 docker images
 docker run --name c1  hello-world
 docker ps -a
 docker run --name c1  hello-world   // it should fail due to name conflict
 docker run --name c2 -d  hello-world
 docker ps -a
 docker run --name os-container1 ubuntu   // it should create a exited container because of no terminal
 docker ps -a
 docker run --name c3 nginx
 docker logs c3

docker logs --follow  bce34bb3c617 >> to get the live logs (One of the drawbacks of the above command is that it will contain all the logs from the start)

docker logs --follow --tail 1 bce34bb3c617 (view the continuous log output with the recent records)

docker logs --since 2022-05-16  bce34bb3c617 

docker logs -f containername &> baeldung-postgress.log & 
(we redirect all the live logs to the baeldung-postgress.log file. Also, we run this command in the background using the &, so it will keep running until it is explicitly stopped.)

 docker run --name os-container2 -it  ubuntu   // it'll take you inside the container
  ### Exit for container with exit command
  
 docker ps -a
 docker run --name os-container3 -dt  ubuntu
 docker ps -a
 
 =====================================================
 
  docker ps -a
 docker stop os-container3
 docker ps -a
 docker start os-container3
 docker ps -a
 docker restart os-container3
 docker ps -a
 docker kill os-container3
 docker ps -a
 docker start os-container3
 docker ps -a
 docker rm c1
 docker ps -a
 docker rm os-container3   // it should through error, in case of running containers
 docker rm -f os-container3
 docker ps -a
 docker ps -l >> last container running
 docker ps -lq >> last container running ID
 docker ps -aq >> show all the containers IDs running
 docker ps -q
 docker rm -f ` docker ps -aq`  // Single Postoffice quote near to ESC Button on keyboard
 docker ps -q
 docker ps -a
 docker run -it --name c1 ubuntu:20.04
 docker ps
 docker run -dt --name c2 --hostname c2 ubuntu:20.04
 docker ps
 docker exec -it c2 ls -l / >> execute the command but do not go inside
 docker exec -it c2 ps -ef >> execute the result but do not go inside
 docker exec -it c2 /bin/bash >> will go inside to /bin/bash >> after exit it still runs.
 docker ps
 docker logs c1
 docker top c1
 docker stats
 
 
 ===========================================================
 
 Docker Network:
     
 docker ps
 docker run -dt --name c3 --hostname c3 httpd


 docker ps
 docker exec -it c3 /bin/bash
 ## apt update -y
 ## apt install iproute2 procps curl -y
 ## ip addr
 ## ps -ef
 ## curl localhost
 ## exit
 
 curl 172.17.0.4
 ip addr
 docker ps
 docker inspect c1 | more
 docker inspect c2 | more
 curl 172.17.0.2
 curl 172.17.0.4
 ip route
 docker inspect c3
 ip addr
 docker ps
 docker rm -f c3
 docker run -dt --name c3 --hostname c3 httpd
 docker ps
 docker run -dt --name c4 --hostname c4 -p 80:80  httpd
 docker ps
 docker run -dt --name c5 --hostname c5 -p 80:80  nginx  // it should through error as bounding to existing port
 docker ps -a
 docker run -dt --name c6 --hostname c6 -p 81:80  nginx
 docker run -dt --name c7 --hostname c7 -P  nginx
 docker ps -a
 
 ================================
 NETWORK BRIDGE:
     
ip route
docker network ls
docker inspect c3 | tail -20
docker network inspect 5f668fb6ec99
docker network create gagan-net --subnet 10.0.0.0/16 >> making our network
docker network ls
ip addr
ip route
docker run -dt --name web1 --hostname web1 -P --network gagan-net httpd
docker inspect web1
curl 10.0.0.2
docker ps -a

docker run -dt --network host httpd (will use host network and mapped with the host port as well)
curl localhost 
curl host-ipaddress
curl host-publicIP from the browser

docker network create network1
docker network create network2

docker run -dt --name d3 --network network1 centos
docker run -dt --name d4 --network network1 centos

docker run -dt --name d5 --network network2 centos
docker run -dt --name d6 --network network2 centos

docker network connect network1 d6 (d6 will be able to connect with network1 container via ip and their hostname which is not possible in bridge network)
docker network disconnect network1 d6

docker exec -it 81019715a2cc ping d3
docker exec -it 81019715a2cc ping d4
=====================================
Docker Volume


 docker ps -a
 docker rm -f ` docker ps -aq`
 clear
 docker images
 mkdir /gagan
 fdisk -l
 echo "hello from gagandeep" >> /gagan/index.html
 cat /gagan/index.html
 docker run -dt --name web1 -p 80:80 httpd
 docker exec -it web1 /bin/bash
 docker run -dt --name web2 -p 81:80 -v /gagan:/usr/local/apache2/htdocs  httpd
 cat /gagan/index.html
 echo "Hello from Gagandeep v2" > /gagan/index.html
 docker run -dt --name web3 -p 82:80 -v /gagan:/usr/local/apache2/htdocs  httpd
 docker exec -it web3 /bin/bash
 cd /gagan
 
 ========================================== 
 DOCKER IMAGE
 
 cd /gagan
 vi Dockerfile
 docker images
 docker build -t myimage:latest -f /gagan >> -f to give the location of Dockerfile
 docker images
 docker run -dt --name web1 -p 80:80 myimage
 docker ps -a
 curl localhost
 docker ps
 
 [root@gagan-dockerhost gagan]# cat Dockerfile
FROM centos:7
RUN yum install httpd -y
RUN echo "Hello from gagandeep" > /var/www/html/index.html
RUN touch /gagandeep
CMD ["httpd","-D","FOREGROUND"]
[root@gagan-dockerhost gagan]#


================================================
IMAGE PUSH to DOCKERHUB


 docker images
 docker tag myimage:latest gagandeepthinknyx/myrepo:latest
 docker images
 docker login
 docker push gagandeepthinknyx/myrepo:latest
 docker rm -f ` docker ps -aq`
 docker rmi -f ` docker images -q`
 docker ps -a
 docker images
 docker run -dt --name web1 -p 80:80 gagandeepthinknyx/myrepo:latest
 docker ps
 curl localhost
 
 ============================================


docker commit container-id
docker tag 0c17f0798823 cloudsihmar/myimages:latest
docker push cloudsihmar/myimages:latest

=============================================

Dockerfile

FROM ubuntu
MAINTAINER sandy.2087@gmail.com

RUN apt-get update -y
RUN apt-get install nginx-light -y
CMD [“echo”,”Image created is created for testing”]



FROM ubuntu
RUN apt-get update -y
RUN apt-get install alpine -y
EXPOSE 80

==============================================================

FROM centos:7
RUN yum -y install httpd
EXPOSE 80
CMD ["httpd","-D","FOREGROUND"]

docker build -t httpd5 .
docker run -dt --name web5 httpd5
docker inspect e1b132ecec57 | grep -i ipaddress
curl 172.17.0.4

=============================================================

COPY command :

FROM centos:7
RUN yum -y install httpd
COPY ./index.html /var/www/html/index.html
EXPOSE 80
CMD ["httpd","-D","FOREGROUND"]

echo "hello from techlanders" > index.html
docker build -t httpd6 .
docker run -dt -p 80:80 --name web8 httpd6
docker inspect 2f5d0759dd95 | grep -i ipaddress
curl 172.17.0.4


Nginx file >>  /usr/share/nginx/html/index.html


==============================================================

Command : It is an instruction which is executed when we run a container our of image.

FROM ubuntu:16.04
CMD echo 'Welcome to this world'

docker build -t app .

docker run -it image-id
Welcome to this world   >> we will get this output

we can override this command...
docker run -it image-id echo 'Welcome to AWS'


FROM ubuntu:16.04
CMD echo 'Welcome to this world'
CMD echo 'Welcome to Home'

in above case, only the latest command will be executed


EntryPoint :
It is also an instruction like runtime instruction like CMD. it has certain differences.

FROM ubuntu:16.04
ENTRYPOINT ["echo","Hi there"]

docker build -t app .

docker run -it image-id echo 'how are you'

hi there echo how are you  (will not override, it will append the result)


FROM ubuntu:16.04
ENTRYPOINT ["echo"]
CMD ["HI there"]

it will give us the result as "Hi there" we can override it 

docker run -it image-id 'Hi Sandeep'
Hi Sandeep  >> will replace the CMD in the dockerfile


so we can override the CMD but can not override the Entrypoint, but can be appened.

====================================================================================
WORKDIR >>

Imagine you have set of instructions which you need to excute in a particular directory or folder.
It would not be convenient to provide the path of a particular folder every time you run an instruction.
If you have 10 instructions, then 10 times you do not want to mention the file path. so it can become tiresom.


vi Dockerfile

FROM ubuntu

WORKDIR /root/
RUN touch ./testfile_1.txt
RUN touch ./testfile_2.txt
RUN touch ./testfile_3.txt

RUN mkdir /root/testfolder
WORKDIR /root/testfolder
RUN mkdir ./child_1
RUN mkdir ./child_2

==========================================================================================

version: "3.7"
services:
  app: 
    image: petclinic:v3
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=mysql
    networks:
      - petclinic
    links:
      - db:database
  db:
    image: mysql:5.7
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_USER=petclinic
      - MYSQL_PASSWORD=petclinic
      - MYSQL_DATABASE=petclinic
    networks:
      - petclinic
networks:
   petclinic:
     driver: bridge


======================================

version: "3.7"
services:
  db:
    # We use a mariadb image which supports both amd64 & arm64 architecture
    image: mariadb:10.6.4-focal
    # If you really want to use MySQL, uncomment the following line
    #image: mysql:8.0.27
    command: '--default-authentication-plugin=mysql_native_password'
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=somewordpress
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER=wordpress
      - MYSQL_PASSWORD=wordpress
    expose:
      - 3306
      - 33060
  wordpress:
    image: wordpress:latest
    ports:
      - 80:80
    restart: always
    environment:
      - WORDPRESS_DB_HOST=db
      - WORDPRESS_DB_USER=wordpress
      - WORDPRESS_DB_PASSWORD=wordpress
      - WORDPRESS_DB_NAME=wordpress
volumes:
  db_data:




