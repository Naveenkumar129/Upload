var urlopen = require('urlopen'); // Module to make HTTP requests

// Replace these values with your API details
var client_id = "your_client_id";
var client_secret = "your_client_secret";
var token_url = "https://example.com/oauth/token"; // Replace with your actual token URL

// Prepare the request payload
var requestPayload = `client_id=${encodeURIComponent(client_id)}&client_secret=${encodeURIComponent(client_secret)}`;

// Define the request options
var options = {
    target: token_url,
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
    },
    data: requestPayload
};

// Send the request to get the token
urlopen.open(options, function(error, response) {
    if (error) {
        console.error('Error making the request:', error);
        session.output.write(JSON.stringify({ error: 'Failed to fetch token', details: error }));
    } else {
        // Parse the response
        response.readAsJSON(function(err, json) {
            if (err) {
                console.error('Error parsing the response:', err);
                session.output.write(JSON.stringify({ error: 'Invalid JSON response', details: err }));
            } else {
                console.log('Access Token:', json.access_token);
                session.output.write(JSON.stringify({ access_token: json.access_token }));
            }
        });
    }
});


---ure = encodeURIComponent(signature);
    oauthParams.set("oauth_signature", encodedSignature);

    // Return
    return this.getAuthorizationString(oauthParams);
};

/**
 * Parse query parameters out of the URL.
 * https://tools.ietf.org/html/rfc5849#section-3.4.1.3
 *
 * @param {String} uri URL containing all query parameters that need to be signed
 * @return {Map<String, Set<String>} Sorted map of query parameter key/value pairs. Values for parameters with the same name are added into a list.
 */
OAuth.extractQueryParams = function extractQueryParams(uri) {
    uri = url.parse(uri);
    var queryParams = uri.query;

    if (!queryParams) {
        return new Map();
    }

    var queryPairs = new Map();
    var pairs = queryParams
        .split("&")
        .sort(function(a, b) { return a.toLowerCase().localeCompare(b.toLowerCase()); });

    for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        var idx = pair.indexOf("=");
        var key = idx > 0 ? pair.substring(0, idx) : pair;
        if (!queryPairs.has(key)) {
            queryPairs.set(key, new Set());
        }
        var value = idx > 0 && pair.length > idx + 1 ? pair.substring(idx + 1) : EMPTY_STRING;
        queryPairs.get(key).add(value);
    }

    return queryPairs;
};

/**
 * Constructs a valid Authorization header as per
 * https://tools.ietf.org/html/rfc5849#section-3.5.1
 *
 * @param {Map<String, String>} oauthParams Map of OAuth parameters to be included in the Authorization header
 * @return {String} Correctly formatted header
 */
OAuth.getAuthorizationString = function getAuthorizationString(oauthParams) {
    var header = "OAuth ";
    oauthParams.forEach(function(value, key) {
        header += key + '="' + value + '",';
    });
    // Remove trailing ,
    header = header.slice(0, -1);
    return header;
};

/**
 * Normalizes the URL as per
 * https://tools.ietf.org/html/rfc5849#section-3.4.1.2
 *
 * @param {String} uri URL that will be called as part of this request
 * @return {String} Normalized URL
 */
OAuth.getBaseUriString = function getBaseUriString(uri) {
    var uriAsUrl = url.parse(uri);
    // Lowercase scheme and authority
    var protocol = uriAsUrl.protocol.toLowerCase();
    var hostname = uriAsUrl.hostname.toLowerCase();
    var pathname = uriAsUrl.pathname;

    // Remove query and fragment
    var baseUri = protocol + '//' + hostname;
    var hasNonStandardPort = (
        uriAsUrl.port !== undefined &&
        uriAsUrl.port !== null &&
        uriAsUrl.port !== 443 &&
        uriAsUrl.port !== 80
    );
    if (hasNonStandardPort) {
        baseUri = baseUri + ':' + uriAsUrl.port;
    }
    baseUri = baseUri + pathname;

    return baseUri;
};

/**
 * Generates a hash based on request payload as per
 * https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html
 *
 * @param {Any} payload Request payload
 * @return {String} Base64 encoded cryptographic hash of the given payload
 */
OAuth.getBodyHash = function getBodyHash(payload) {
    var bodyHash = crypto.createHash('sha' + SHA_BITS);
    bodyHash.update(payload, "utf8");
    return bodyHash.digest("base64");
};

/**
 * Generates a random string for replay protection as per
 * https://tools.ietf.org/html/rfc5849#section-3.3
 *
 * @return {String} UUID with dashes removed
 */
OAuth.getNonce = function getNonce() {
    var NONCE_LENGTH = 8;
    var VALID_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    var bytes = crypto.randomBytes(NONCE_LENGTH);
    var value = new Array(NONCE_LENGTH).fill(0);

    return value.reduce(function(acc, val, i) {
        acc.push(VALID_CHARS[bytes[i] % VALID_CHARS.length]);
        return acc;
    }, []).join("");
};

/**
 * @param {String} consumerKey Consumer key set up in a Mastercard Developer Portal project
 * @param {Any} payload Payload (nullable)
 * @return {Map}
 */
OAuth.getOAuthParams = function getOAuthParams(consumerKey, payload) {
    var oauthParams = new Map();
    if (!payload) payload = EMPTY_STRING;
    oauthParams.set("oauth_body_hash", OAuth.getBodyHash(payload));
    oauthParams.set("oauth_consumer_key", consumerKey);
    oauthParams.set("oauth_nonce", OAuth.getNonce());
    oauthParams.set("oauth_signature_method", 'RSA-SHA' + SHA_BITS);
    oauthParams.set("oauth_timestamp", OAuth.getTimestamp());
    oauthParams.set("oauth_version", "1.0");
    return oauthParams;
};

/**
 * Generate a valid signature base string as per
 * https://tools.ietf.org/html/rfc5849#section-3.4.1
 *
 * @param {String} httpMethod HTTP method of the request
 * @param {String} baseUri Base URI that conforms with https://tools.ietf.org/html/rfc5849#section-3.4.1.2
 * @param {String} paramString OAuth parameter string that conforms with https://tools.ietf.org/html/rfc5849#section-3.4.1.3
 * @return {String} A correctly constructed and escaped signature base string
 */
OAuth.getSignatureBaseString = function getSignatureBaseString(httpMethod, baseUri, paramString) {
    //encodeURIComponent doesnt encode * so doing it manually
    var encodeParamsString = encodeURIComponent(paramString);
    encodeParamsString = encodeParamsString.replace('*', '%2A');

    var sbs =
        // Uppercase HTTP method
        httpMethod.toUpperCase() + '&' +
        // Base URI
        encodeURIComponent(baseUri) + '&' +
        // OAuth parameter string
        encodeParamsString;

    return sbs.replace(/!/, "%21");
};

/**
 * Returns UNIX Timestamp as required per
 * https://tools.ietf.org/html/rfc5849#section-3.3
 *
 * @return {String} UNIX timestamp (UTC)
 */
OAuth.getTimestamp = function getTimestamp() {
    return Math.floor(Date.now() / 1000);
};

/**
 * Signs the signature base string using an RSA private key. The methodology is described at
 * https://tools.ietf.org/html/rfc5849#section-3.4.3 but Mastercard uses the stronger SHA-256 algorithm
 * as a replacement for the described SHA1 which is no longer considered secure.
 *
 * @param {String} sbs Signature base string formatted as per https://tools.ietf.org/html/rfc5849#section-3.4.1
 * @param {String} signingKey Private key of the RSA key pair that was established with the service provider
 * @return {String} RSA signature matching the contents of signature base string
 */
OAuth.signSignatureBaseString = function signSignatureBaseString(sbs, signingKey) {
    var signer = crypto.createSign("RSA-SHA256");
    signer = signer.update(Buffer.from(sbs));

    var signature;
    try {
        signature = signer.sign(signingKey, "base64");
    } catch (e) {
        throw new Error("Unable to sign the signature base string.");
    }

    return signature;
};
/**
 * Lexicographically sort all parameters and concatenate them into a string as per
 * https://tools.ietf.org/html/rfc5849#section-3.4.1.3.2
 *
 * @param {Object} queryParamsMap Map of all query parameters that need to be signed
 * @param {Object} oauthParamsMap Map of OAuth parameters to be included in Authorization header
 * @return {String} Correctly encoded and sorted OAuth parameter string
 */
function toOAuthParamString(queryParamsMap, oauthParamsMap) {
    var consolidatedParams = {};

    // Copy query parameters to consolidatedParams
    for (var key in queryParamsMap) {
        if (queryParamsMap.hasOwnProperty(key)) {
            consolidatedParams[key] = queryParamsMap[key];
        }
    }

    // Add OAuth parameters to consolidatedParams
    for (var key in oauthParamsMap) {
        if (oauthParamsMap.hasOwnProperty(key)) {
            if (consolidatedParams.hasOwnProperty(key)) {
                consolidatedParams[key].push(oauthParamsMap[key]);
            } else {
                consolidatedParams[key] = [oauthParamsMap[key]];
            }
        }
    }

    // Lexicographically sort all parameters
    var sortedKeys = Object.keys(consolidatedParams).sort();

    var allParams = "";
    for (var i = 0; i < sortedKeys.length; i++) {
        var entryKey = sortedKeys[i];
        var entryValues = consolidatedParams[entryKey];

        // Sort values if there are multiple for the same key
        entryValues.sort();

        for (var j = 0; j < entryValues.length; j++) {
            allParams += entryKey + "=" + entryValues[j] + "&";
        }
    }

    // Remove trailing ampersand
    if (allParams.endsWith("&")) {
        allParams = allParams.slice(0, -1);
    }

    return allParams;
}
======

// Example usage:
var queryParamsMap = {
    "param1": ["value1", "value2"],
    "param2": ["value3"]
};

var oauthParamsMap = {
    "oauth_consumer_key": "your_consumer_key",
    "oauth_nonce": "generated_nonce",
    "oauth_signature_method": "HMAC-SHA1",
    "oauth_timestamp": "generated_timestamp",
    "oauth_version": "1.0"
};

var result = toOAuthParamString(queryParamsMap, oauthParamsMap);
console.log(result);
