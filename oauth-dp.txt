// Read JSON input from the request body
var input = session.input.readJSON();

// Define some helper functions
function validateInput(data) {
    if (!data.name || !data.age) {
        throw new Error('Invalid input: name and age are required.');
    }
}

function processData(data) {
    return {
        message: `Hello, ${data.name}! You are ${data.age} years old.`,
        timestamp: new Date().toISOString()
    };
}

function sendResponse(response) {
    session.output.write(response);
}

// Main execution
try {
    // Validate the input
    validateInput(input);

    // Process the input
    var response = processData(input);

    // Send the response
    sendResponse(response);

} catch (error) {
    // Handle any errors
    session.output.write({ error: error.message });
}



------
// Require necessary modules
var hm = require('header-metadata');
var crypto = require('crypto');

// Set up response headers
hm.response.headers['Content-Type'] = 'application/json';

// Example private key stored in DataPower crypto key store
var privateKey = 'local:///your-private-key.pem';

// Function to sign the payload
function signPayload(payload, privateKey) {
    var sign = crypto.createSign('RSA-SHA256');
    sign.update(payload);
    var signature = sign.sign(privateKey, 'base64');
    return signature;
}

// Read JSON payload from the request
session.input.readAsJSON(function (error, jsonPayload) {
    if (error) {
        session.output.write(JSON.stringify({error: 'Error reading JSON payload'}));
    } else {
        // Convert JSON payload to string
        var payloadString = JSON.stringify(jsonPayload);

        // Sign the payload
        var signature = signPayload(payloadString, privateKey);

        // Send back the signature
        session.output.write(JSON.stringify({signature: signature}));
    }
});




--------
const fs = require('fs');
const path = require('path');

// Replace with the path to your local file
const filePath = path.join(__dirname, 'path/to/mastercard-postman-encryption-lib.min.js');

// Read the local file
fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) {
        console.error(`Error reading file: ${err}`);
        return;
    }
    
    // Print the file content to the console
    console.log(data);
});




// Function to combine and sort query and OAuth parameters
function toOAuthParamString(queryParamsMap, oauthParamsMap) {
    var consolidatedParams = {};

    // Combine query and OAuth parameters
    Object.keys(queryParamsMap).forEach(function(key) {
        consolidatedParams[key] = queryParamsMap[key];
    });
    Object.keys(oauthParamsMap).forEach(function(key) {
        if (consolidatedParams[key]) {
            consolidatedParams[key].push(oauthParamsMap[key]);
        } else {
            consolidatedParams[key] = [oauthParamsMap[key]];
        }
    });

    // Sort keys
    var sortedKeys = Object.keys(consolidatedParams).sort();
    var allParams = "";
    sortedKeys.forEach(function(key) {
        var values = consolidatedParams[key].sort();
        values.forEach(function(value) {
            allParams += key + "=" + value + "&";
        });
    });

    return allParams.slice(0, -1); // Remove trailing ampersand
}



// Load required modules
var urlopen = require('urlopen');
var hm = require('header-metadata');

// Function to extract query parameters from a URI
function extractQueryParams(uri) {
    var queryParams = uri.split('?')[1] || "";
    if (!queryParams) {
        return {};
    }

    var queryPairs = {};
    var pairs = queryParams.split("&").sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));

    pairs.forEach(function(pair) {
        var idx = pair.indexOf("=");
        var key = idx > 0 ? pair.substring(0, idx) : pair;
        if (!queryPairs[key]) {
            queryPairs[key] = [];
        }
        var value = idx > 0 && pair.length > idx + 1 ? pair.substring(idx + 1) : "";
        queryPairs[key].push(value);
    });

    return queryPairs;
}



// Generate Nonce function
function getNonce() {
    var NONCE_LENGTH = 8;
    var VALID_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var nonce = [];
    for (var i = 0; i < NONCE_LENGTH; i++) {
        var randomIndex = Math.floor(Math.random() * VALID_CHARS.length);
        nonce.push(VALID_CHARS[randomIndex]);
    }
    return nonce.join("");
}


----
var hm = require('header-metadata');
var crypto = require('crypto');

// Constants
var EMPTY_STRING = "";
var SHA_BITS = "256";

// Main function to calculate OAuth header
function getAuthorizationHeader(uri, method, payload, consumerKey, signingKeyName) {
    var queryParams = extractQueryParams(uri);
    var oauthParams = getOAuthParams(consumerKey, payload);

    // Combine query and oauth_ parameters into lexicographically sorted string
    var paramString = toOAuthParamString(queryParams, oauthParams);

    // Normalized URI without query params and fragment
    var baseUri = getBaseUriString(uri);

    // Signature base string
    var sbs = getSignatureBaseString(method, baseUri, paramString);

    // Signature
    var signature = signSignatureBaseString(sbs, signingKeyName);
    var encodedSignature = encodeURIComponent(signature);
    oauthParams["oauth_signature"] = encodedSignature;

    // Return
    return getAuthorizationString(oauthParams);
}

// Extract Query Parameters
function extractQueryParams(uri) {
    var queryParams = uri.split('?')[1] || "";
    if (!queryParams) {
        return {};
    }

    var queryPairs = {};
    var pairs = queryParams.split("&").sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));

    pairs.forEach(function(pair) {
        var idx = pair.indexOf("=");
        var key = idx > 0 ? pair.substring(0, idx) : pair;
        if (!queryPairs[key]) {
            queryPairs[key] = [];
        }
        var value = idx > 0 && pair.length > idx + 1 ? pair.substring(idx + 1) : EMPTY_STRING;
        queryPairs[key].push(value);
    });

    return queryPairs;
}

// Generate OAuth Parameters
function getOAuthParams(consumerKey, payload) {
    var oauthParams = {};
    if (!payload) payload = EMPTY_STRING;
    oauthParams["oauth_body_hash"] = getBodyHash(payload);
    oauthParams["oauth_consumer_key"] = consumerKey;
    oauthParams["oauth_nonce"] = getNonce();
    oauthParams["oauth_signature_method"] = "RSA-SHA" + SHA_BITS;
    oauthParams["oauth_timestamp"] = getTimestamp();
    oauthParams["oauth_version"] = "1.0";
    return oauthParams;
}

// Create Signature Base String
function getSignatureBaseString(httpMethod, baseUri, paramString) {
    return httpMethod.toUpperCase() + "&" + encodeURIComponent(baseUri) + "&" + encodeURIComponent(paramString);
}

// Sign the Base String
function signSignatureBaseString(sbs, signingKeyName) {
    var signParams = {
        key: signingKeyName, // Name of the Crypto Key object
        algorithm: 'RSA-SHA256'
    };
    var signature = crypto.sign(signParams, sbs, 'base64');
    return signature;
}

// Create the Authorization Header
function getAuthorizationString(oauthParams) {
    var header = "OAuth ";
    for (var key in oauthParams) {
        if (oauthParams.hasOwnProperty(key)) {
            header += key + '="' + oauthParams[key] + '",';
        }
    }
    return header.slice(0, -1); // Remove trailing comma
}

// Get Body Hash
function getBodyHash(payload) {
    var hash = crypto.createHash('sha' + SHA_BITS);
    hash.update(payload, "utf8");
    return hash.digest("base64");
}

// Generate Nonce
function getNonce() {
    var NONCE_LENGTH = 8;
    var VALID_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var nonce = [];
    for (var i = 0; i < NONCE_LENGTH; i++) {
        var randomIndex = Math.floor(Math.random() * VALID_CHARS.length);
        nonce.push(VALID_CHARS[randomIndex]);
    }
    return nonce.join("");
}

// Get Timestamp
function getTimestamp() {
    return Math.floor(Date.now() / 1000);
}

// Normalize Base URI
function getBaseUriString(uri) {
    var parts = uri.split('?')[0];
    var normalizedUrl = parts.toLowerCase();
    return normalizedUrl;
}

// Combine and Sort Parameters
function toOAuthParamString(queryParamsMap, oauthParamsMap) {
    var consolidatedParams = {};

    // Combine query and oauth params
    Object.keys(queryParamsMap).forEach(function(key) {
        consolidatedParams[key] = queryParamsMap[key];
    });
    Object.keys(oauthParamsMap).forEach(function(key) {
        if (consolidatedParams[key]) {
            consolidatedParams[key].push(oauthParamsMap[key]);
        } else {
            consolidatedParams[key] = [oauthParamsMap[key]];
        }
    });

    // Sort keys
    var sortedKeys = Object.keys(consolidatedParams).sort();
    var allParams = "";
    sortedKeys.forEach(function(key) {
        var values = consolidatedParams[key].sort();
        values.forEach(function(value) {
            allParams += key + "=" + value + "&";
        });
    });

    return allParams.slice(0, -1); // Remove trailing ampersand
}

// Example usage
var uri = "https://example.com/resource?param=value";
var method = "GET";
var payload = "";
var consumerKey = "your_consumer_key";
var signingKeyName = "your_crypto_key_name"; // Name of the Crypto Key object
var oauthHeader = getAuthorizationHeader(uri, method, payload, consumerKey, signingKeyName);
hm.current.set('Authorization', oauthHeader);
